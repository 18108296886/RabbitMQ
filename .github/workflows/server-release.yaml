name: Server Release
on:
  push:
    branches:
      - rin/github-actions-server-release-pipeline
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  source-dist:
    runs-on: ubuntu-latest
    outputs:
      rabbitmq_version: ${{ steps.version.outputs.rabbitmq_version }}
      full_version: ${{ steps.version.outputs.full_version }}
    timeout-minutes: 20
    steps:
    - name: CHECKOUT REPOSITORY
      uses: actions/checkout@v3
      with:
        path: rabbitmq-server
    - name: COMPUTE VERSION
      id: version
      working-directory: rabbitmq-server
      run: |
        RABBITMQ_VERSION=$(grep -E '^APP_VERSION' rabbitmq.bzl | awk '{gsub(/"/, "", $3); print $3}')
        FULL_VERSION="${RABBITMQ_VERSION}-${{ github.run_id }}-$(git rev-parse --short HEAD)"

        echo "rabbitmq_version=${RABBITMQ_VERSION}" | tee -a $GITHUB_OUTPUT
        echo "full_version=${FULL_VERSION}" | tee -a $GITHUB_OUTPUT
    - name: INJECT FULL VERSION
      working-directory: rabbitmq-server
      run: |
        sed -i"_orig" -E '/APP_VERSION/ s/"[0-9]+\..*"/"${{ steps.version.outputs.full_version }}"/' rabbitmq.bzl
        rm *_orig
    - name: CONFIGURE OTP & ELIXIR
      uses: erlef/setup-beam@v1.15
      with:
        otp-version: 25
        elixir-version: 1.14
    - name: CONFIGURE BAZEL
      working-directory: rabbitmq-server
      run: |
        cat << EOF >> user.bazelrc
          build --disk_cache=
          build --color=yes
        EOF
    - name: BUILD package-generic-unix.tar.xz
      working-directory: rabbitmq-server
      run: |
        bazelisk build //:package-generic-unix \
          --repository_cache=${{ github.workspace }}/repo-cache \
          --verbose_failures
    - name: FETCH BCR
      uses: actions/checkout@v3
      with:
        repository: bazelbuild/bazel-central-registry
        path: bcr
    - name: BUILD source-dist.tar.xz
      env:
        SOURCE_DIST_DIR: ${{ github.workspace }}/source-dist
        SERVER_DIR: ${{ github.workspace }}/source-dist/rabbitmq-server-${{ steps.version.outputs.full_version }}
      run: |
        mkdir -p ${{ env.SERVER_DIR }}
        pushd rabbitmq-server
        git archive ${{ github.ref }} \
          | tar -x -C ${{ env.SERVER_DIR }}
        popd
        pushd ${{ env.SERVER_DIR }}
        sed -i"_orig" -E '/APP_VERSION/ s/"[0-9]+\..*"/"${{ steps.version.outputs.full_version }}"/' rabbitmq.bzl
        rm *_orig
        popd

        mkdir -p ${SOURCE_DIST_DIR}/bcr
        pushd bcr
        git archive main \
          | tar -x -C ${SOURCE_DIST_DIR}/bcr bazel_registry.json modules
        popd

        rsync -a ${{ github.workspace }}/repo-cache ${SOURCE_DIST_DIR}

        cd source-dist
        tree -L 3
        tar --create \
          --xz \
          --file ../source-dist.tar.xz \
          *
    - name: UPLOAD source-dist.tar.xz
      uses: actions/upload-artifact@v3.1.2
      with:
        name: source-dist.tar.xz
        path: source-dist.tar.xz
        if-no-files-found: error
    - name: RESOLVE ARCHIVES_DIR
      working-directory: rabbitmq-server
      run: |
        echo "archives_dir=$(readlink -f bazel-bin)" >> $GITHUB_ENV
    - name: UPLOAD package-generic-unix.tar.xz
      uses: actions/upload-artifact@v3.1.2
      with:
        name: package-generic-unix.tar.xz
        path: ${{ env.archives_dir }}/package-generic-unix.tar.xz
        if-no-files-found: error
  build-test-package-debian:
    needs:
    - source-dist
    runs-on: ubuntu-latest
    container: pivotalrabbitmq/rabbitmq-server-buildenv:linux-erlang-25.0
    timeout-minutes: 20
    steps:
    - name: CHECKOUT rabbitmq/rabbitmq-packaging
      uses: actions/checkout@v3
      with:
        repository: rabbitmq/rabbitmq-packaging
        ref: bazel
        path: rabbitmq-packaging
    - name: DOWNLOAD source-dist.tar.xz
      uses: actions/download-artifact@v3
      with:
        name: source-dist.tar.xz
    - name: BUILD .deb
      env:
        DEBIAN_ORIG_TARBALL: rabbitmq_server-${{ needs.source-dist.outputs.rabbitmq_version }}.orig.tar.xz
      run: |
        set -x

        pwd

        SOURCE_DIST_FILE="$PWD/source-dist.tar.xz"
        UNPACKED_DIR="$PWD/rabbitmq_server-${{ needs.source-dist.outputs.rabbitmq_version }}"

        cd rabbitmq-packaging/debs/Debian

        # Because we are creating a source package as well, Debian expects the
        # source archive to have a specially formatted name. Copy the original
        # archive to a correctly named file.
        cp "${SOURCE_DIST_FILE}" "${{ env.DEBIAN_ORIG_TARBALL }}"
        # Prepare the source directory: we extract the source archive and copy
        # the debian/ subdirectory.
        xzcat "${{ env.DEBIAN_ORIG_TARBALL }}" | tar -xf -
        cp -a debian "${UNPACKED_DIR}/debian"
        # Install build dependencies. To help us, we use mk-build-deps(1) from
        # the devscripts package.
        #
        # We ignore errors from the first `dpkg -i` because the command will
        # fail: dependencies are missing and dpkg(8) doesn't install them.
        # That's why we have `apt-get install -f` following. To double-check
        # everything went fine, we have the second `dpkg -i`.
        apt-get install -y --no-install-recommends devscripts equivs
        mk-build-deps debian/control
        dpkg -i ./rabbitmq-server-build-deps_*_all.deb || true
        apt-get install -y -f -V --no-install-recommends
        dpkg -i ./rabbitmq-server-build-deps_*_all.deb

        cd "${{ env.UNPACKED_DIR}}"; \
          dpkg-buildpackage -sa
