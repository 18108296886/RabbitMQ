# https://github.com/marketplace/actions/build-and-push-docker-images
name: OCI
on:
  push:
    paths-ignore:
      - '.github/workflows/secondary-umbrella.yaml'
  workflow_dispatch:
env:
  GENERIC_UNIX_ARCHIVE: ${{ github.workspace }}/bazel-bin/package-generic-unix.tar.xz
  RABBITMQ_VERSION: ${{ github.event.pull_request.head.sha || github.sha }}
  VERSION: ${{ github.event.pull_request.head.sha || github.sha }}
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true
jobs:

  # This job will build one docker image per supported Erlang major version.
  # Each image will have two tags (one containing the Git commit SHA, one containing the branch name).
  #
  # For example, for Git commit SHA '111aaa' and branch name 'main' and maximum supported Erlang major version '26',
  # the following tags will be pushed to Dockerhub:
  #
  # * 111aaa-otp-min (image OTP 25)
  # * main-otp-min (image OTP 25)
  # * 111aaa-otp-max (image OTP 26)
  # * main-otp-max (image OTP 26)

  build-publish-dev-bazel:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - image_tag_suffix: otp-min-bazel
            otp_major: 25
          - image_tag_suffix: otp-max-bazel
            otp_major: 25
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Inject RabbitMQ Version
        run: |
          sed -i"_orig" -E '/APP_VERSION/ s/3\.[0-9]+\.[0-9]+/${{ github.event.pull_request.head.sha || github.sha }}/' rabbitmq.bzl

      - name: Mount Bazel Cache
        uses: actions/cache@v3.0.8
        with:
          path: "/home/runner/repo-cache/"
          key: repo-cache

      - name: Configure Bazel
        run: |
          if [ -n "${{ secrets.BUILDBUDDY_API_KEY }}" ]; then
          cat << EOF >> user.bazelrc
            build:buildbuddy --remote_header=x-buildbuddy-api-key=${{ secrets.BUILDBUDDY_API_KEY }}
          EOF
          fi
          cat << EOF >> user.bazelrc
            build:buildbuddy --build_metadata=ROLE=CI
            build:buildbuddy --build_metadata=VISIBILITY=PRIVATE
            build:buildbuddy --repository_cache=/home/runner/repo-cache/
            build:buildbuddy --color=yes
            build:buildbuddy --disk_cache=

            build:buildbuddy --remote_download_toplevel

            build --@io_bazel_rules_docker//transitions:enable=false
          EOF

      - name: Check OTP/Elixir versions used in RBE
        id: load-info
        run: |
          bazelisk build :otp_version :elixir_version \
            --config=rbe-${{ matrix.otp_major }}
          echo "::set-output name=otp::$(cat bazel-bin/otp_version.txt)"
          echo "::set-output name=elixir::$(cat bazel-bin/elixir_version.txt)"

      - name: Configure OTP & Elixir
        uses: erlef/setup-beam@v1.13
        with:
          otp-version: ${{ steps.load-info.outputs.otp }}
          elixir-version: ${{ steps.load-info.outputs.elixir }}

      - name: Build
        run: |
          export ERLANG_HOME="$(dirname $(dirname $(which erl)))"
          export ELIXIR_HOME="$(dirname $(dirname $(which iex)))"
          bazelisk build //packaging/docker-image:rabbitmq \
            --config=buildbuddy

      - name: Test
        run: |
          export ERLANG_HOME="$(dirname $(dirname $(which erl)))"
          export ELIXIR_HOME="$(dirname $(dirname $(which iex)))"
          OCI_TESTS=$(bazel query 'tests(//packaging/docker-image/...)')
          bazelisk test ${OCI_TESTS} \
            --config=buildbuddy

      - name: Load
        run: |
          export ERLANG_HOME="$(dirname $(dirname $(which erl)))"
          export ELIXIR_HOME="$(dirname $(dirname $(which iex)))"
          bazelisk run //packaging/docker-image:rabbitmq \
            --config=buildbuddy

      - name: Check for Push Credentials
        id: authorized
        run: |
          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
            echo "::set-output name=PUSH::true"
          else
            echo "::set-output name=PUSH::false"
          fi

      - name: Login to DockerHub
        if: steps.authorized.outputs.PUSH == 'true'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Tag and Push
        if: steps.authorized.outputs.PUSH == 'true'
        run: |
          TAG_1="${{ github.event.pull_request.head.sha || github.sha }}-${{ matrix.image_tag_suffix }}"
          TAG_2="${GITHUB_REF##*/}-${{ matrix.image_tag_suffix }}"

          docker tag bazel/packaging/docker-image:rabbitmq \
            pivotalrabbitmq/rabbitmq:${TAG_1}
          docker tag bazel/packaging/docker-image:rabbitmq \
            pivotalrabbitmq/rabbitmq:${TAG_2}

          docker push pivotalrabbitmq/rabbitmq:${TAG_1}
          docker push pivotalrabbitmq/rabbitmq:${TAG_2}
