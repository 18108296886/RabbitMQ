# https://github.com/marketplace/actions/build-and-push-docker-images
name: OCI
on:
  push:
    paths-ignore:
      - '.github/workflows/secondary-umbrella.yaml'
      - '.github/workflows/update-elixir-patches.yaml'
      - '.github/workflows/update-otp-patches.yaml'
  workflow_dispatch:
env:
  VERSION: ${{ github.event.pull_request.head.sha || github.sha }}
  REGISTRY_IMAGE: pivotalrabbitmq/rabbitmq
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true
jobs:
  generate-context:
    runs-on: ubuntu-latest
    env:
      CONTEXT_DIR: context
    outputs:
      PUSH: ${{ steps.authorized.outputs.PUSH }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: rabbitmq-server
      - name: Configure Bazel
        working-directory: rabbitmq-server
        run: |
          if [ -n "${{ secrets.BUILDBUDDY_API_KEY }}" ]; then
          cat << EOF >> user.bazelrc
            build:buildbuddy --remote_header=x-buildbuddy-api-key=${{ secrets.BUILDBUDDY_API_KEY }}
          EOF
          fi
          cat << EOF >> user.bazelrc
            build:buildbuddy --build_metadata=ROLE=CI
            build:buildbuddy --build_metadata=VISIBILITY=PRIVATE
            build:buildbuddy --color=yes
          EOF
      - name: Build package-generic-unix
        working-directory: rabbitmq-server
        run: |
          bazelisk build package-generic-unix \
            --config=rbe-26_2 \
            --remote_download_toplevel
      - name: Assemble Contenxt
        run: |
          mkdir ${{ env.CONTEXT_DIR }}
          cp -r \
            rabbitmq-server/bazel-bin/package-generic-unix.tar.xz \
            rabbitmq-server/packaging/docker-image/* \
            ${{ env.CONTEXT_DIR }}

          rm -r ${{ env.CONTEXT_DIR }}/test_configs
          rm ${{ env.CONTEXT_DIR }}/BUILD.bazel
          rm ${{ env.CONTEXT_DIR }}/Makefile

          tree ${{ env.CONTEXT_DIR }}
      - name: Upload context
        uses: actions/upload-artifact@v4
        with:
          name: context
          path: ${{ env.CONTEXT_DIR }}
          if-no-files-found: error
      - name: Check for Push Credentials
        id: authorized
        run: |
          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
            echo "PUSH=true" >> $GITHUB_OUTPUT
          else
            echo "PUSH=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: generate-context
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Download context
        uses: actions/download-artifact@v4
        with:
          name: context
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
      - name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        if: needs.generate-context.outputs.PUSH == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build and push by digest
        if: needs.generate-context.outputs.PUSH == 'true'
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
      - name: Export digest
        if: needs.generate-context.outputs.PUSH == 'true'
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      - name: Upload digest
        if: needs.generate-context.outputs.PUSH == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - generate-context
      - build
    steps:
      - name: Download digests
        if: needs.generate-context.outputs.PUSH == 'true'
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true
      - name: Set up Docker Buildx
        if: needs.generate-context.outputs.PUSH == 'true'
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        if: needs.generate-context.outputs.PUSH == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
      - name: Login to Docker Hub
        if: needs.generate-context.outputs.PUSH == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Create manifest list and push
        if: needs.generate-context.outputs.PUSH == 'true'
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
      - name: Inspect image
        if: needs.generate-context.outputs.PUSH == 'true'
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}

  summary-oci:
    needs:
    - merge
    runs-on: ubuntu-latest
    steps:
    - name: SUMMARY
      run: |
        echo "SUCCESS"
