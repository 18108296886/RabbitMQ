"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview NodeJS binding to run the buildozer command through a convenient API
 */
const child_process_1 = require("child_process");
// Use require() here since the file doesn't exist at design-time;
// bazel will copy the /launcher.js in this repo while building the package
const { getNativeBinary } = require('./buildozer');
;
/**
 * run buildozer with a list of commands
 * @see https://github.com/bazelbuild/buildtools/tree/master/buildozer#do-multiple-changes-at-once
 * @returns The standard out of the buildozer command, split by lines
 */
function run(...commands) {
    return runWithOptions(commands, {});
}
exports.run = run;
/**
 * run buildozer with a list of commands
 * @param commands a list of CommandBatch to pass to buildozer
 * @param options Options to pass to spawn
 * @param flags any buildozer flags to pass
 */
function runWithOptions(commands, options, flags = []) {
    // From https://github.com/bazelbuild/buildtools/tree/master/buildozer#usage:
    // Here, label-list is a space-separated list of Bazel labels,
    // for example //path/to/pkg1:rule1 //path/to/pkg2:rule2.
    // Buildozer reads commands from FILE (- for stdin 
    //   (format: |-separated command line arguments to buildozer, excluding flags))
    const input = commands.map(c => [...c.commands, c.targets.join(',')].join('|')).join('\n');
    const { stdout, stderr, status, error } = child_process_1.spawnSync(getNativeBinary(), flags.concat([
        '-f', '-' /* read commands from stdin */
    ]), Object.assign(Object.assign({}, options), { input, encoding: 'utf-8' }));
    // https://github.com/bazelbuild/buildtools/tree/master/buildozer#error-code
    if (status == 0 || status == 3)
        return stdout.trim().split('\n').filter(l => !!l);
    console.error(`buildozer exited with status ${status}\n${stderr}`);
    throw error;
}
exports.runWithOptions = runWithOptions;
