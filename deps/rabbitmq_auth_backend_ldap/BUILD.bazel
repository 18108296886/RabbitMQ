load("@rules_erlang//:eunit2.bzl", "eunit")
load("@rules_erlang//:xref2.bzl", "xref")
load("@rules_erlang//:dialyze.bzl", "dialyze", "plt")
load(
    "//:rabbitmq.bzl",
    "RABBITMQ_DIALYZER_OPTS",
    "assert_suites",
    "broker_for_integration_suites",
    rabbitmq_app = "rabbitmq_app2",
    rabbitmq_integration_suite = "rabbitmq_integration_suite2",
    rabbitmq_suite = "rabbitmq_suite2",
    "test_helpers",
)

rabbitmq_app(
    name = "erlang_app",
    app_name = "rabbitmq_auth_backend_ldap",
    extra_apps = [
        "eldap",
        "public_key",
    ],
    deps = [
        "//deps/rabbit",
        "//deps/rabbit_common",
    ],
)

xref(
    name = "xref",
    target = ":erlang_app",
)

plt(
    name = "deps_plt",
    for_target = ":erlang_app",
    ignore_warnings = True,
    plt = "//:base_plt",
)

dialyze(
    name = "dialyze",
    dialyzer_opts = RABBITMQ_DIALYZER_OPTS,
    plt = ":deps_plt",
    target = ":erlang_app",
)

eunit(
    name = "eunit",
    compiled_suites = [":test_helpers"],
    target = ":test_erlang_app",
)

broker_for_integration_suites()

test_helpers(name = "test_helpers")

rabbitmq_integration_suite(
    name = "config_schema_SUITE",
)

rabbitmq_integration_suite(
    name = "system_SUITE",
    size = "medium",
    additional_beam = [
        ":test_helpers",
    ],
    data = [
        "example/global.ldif",
        "example/memberof_init.ldif",
        "example/refint_1.ldif",
        "example/refint_2.ldif",
    ],
    tags = [
        "ldap",
    ],
)

rabbitmq_suite(
    name = "unit_SUITE",
    size = "small",
)

assert_suites()
