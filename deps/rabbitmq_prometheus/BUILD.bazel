load("@rules_erlang//:eunit2.bzl", "eunit")
load("@rules_erlang//:xref2.bzl", "xref")
load("@rules_erlang//:dialyze.bzl", "dialyze", "plt")
load(
    "//:rabbitmq.bzl",
    "RABBITMQ_DIALYZER_OPTS",
    "assert_suites",
    "broker_for_integration_suites",
    rabbitmq_app = "rabbitmq_app2",
    rabbitmq_integration_suite = "rabbitmq_integration_suite2",
)

rabbitmq_app(
    name = "erlang_app",
    app_name = "rabbitmq_prometheus",
    deps = [
        "//deps/rabbit",
        "//deps/rabbitmq_federation",
        "//deps/rabbitmq_management_agent",
        "//deps/rabbitmq_web_dispatch",
        "@erlang_packages//accept",
        "@erlang_packages//cowboy",
        "@erlang_packages//prometheus",
    ],
)

xref(
    name = "xref",
    target = ":erlang_app",
)

plt(
    name = "deps_plt",
    for_target = ":erlang_app",
    ignore_warnings = True,
    plt = "//:base_plt",
)

dialyze(
    name = "dialyze",
    dialyzer_opts = RABBITMQ_DIALYZER_OPTS,
    plt = ":deps_plt",
    target = ":erlang_app",
)

eunit(
    name = "eunit",
    compiled_suites = [":rabbitmq_prometheus_collector_test_proxy_beam_files"],  #keep
    target = ":test_erlang_app",
)

broker_for_integration_suites()

rabbitmq_integration_suite(
    name = "config_schema_SUITE",
    size = "small",
)

rabbitmq_integration_suite(
    name = "rabbit_prometheus_http_SUITE",
    size = "medium",
    flaky = True,
)

rabbitmq_integration_suite(
    name = "prometheus_rabbitmq_federation_collector_SUITE",
    size = "small",
    additional_beam = [
        "//deps/rabbitmq_federation:test/rabbit_federation_test_util.beam",  #keep
        "test/rabbitmq_prometheus_collector_test_proxy.beam",  #keep
    ],
)

assert_suites()
