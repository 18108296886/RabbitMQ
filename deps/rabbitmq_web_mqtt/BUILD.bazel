load("@rules_erlang//:eunit2.bzl", "eunit")
load("@rules_erlang//:xref2.bzl", "xref")
load("@rules_erlang//:dialyze.bzl", "dialyze", "plt")
load(
    "//:rabbitmq.bzl",
    "RABBITMQ_DIALYZER_OPTS",
    "assert_suites",
    "broker_for_integration_suites",
    "rabbitmq_app",
    "rabbitmq_integration_suite",
)
load(
    ":app.bzl",
    "all_beam_files",
    "all_srcs",
    "all_test_beam_files",
    "test_suite_beam_files",
)

# gazelle:exclude test/src

APP_NAME = "rabbitmq_web_mqtt"

APP_DESCRIPTION = "RabbitMQ MQTT-over-WebSockets adapter"

APP_MODULE = "rabbit_web_mqtt_app"

APP_ENV = """[
	    {tcp_config, [{port, 15675}]},
	    {ssl_config, []},
	    {num_tcp_acceptors, 10},
	    {num_ssl_acceptors, 10},
	    {cowboy_opts, []},
	    {proxy_protocol, false}
	  ]"""

all_beam_files(name = "all_beam_files")

<<<<<<< HEAD
DEPS = [
    "//deps/rabbit_common:erlang_app",
    "@cowboy//:erlang_app",
]

RUNTIME_DEPS = [
    "//deps/rabbit:erlang_app",
    "//deps/rabbitmq_mqtt:erlang_app",
]
=======
all_test_beam_files(name = "all_test_beam_files")

all_srcs(name = "all_srcs")
>>>>>>> 2aaf2176d4 (Use gazelle generated bazel files)

test_suite_beam_files(name = "test_suite_beam_files")

# gazelle:erlang_app_extra_app ssl

# gazelle:erlang_app_dep_exclude ranch

rabbitmq_app(
    name = "erlang_app",
    srcs = [":all_srcs"],
    hdrs = [":public_hdrs"],
    app_description = APP_DESCRIPTION,
    app_env = APP_ENV,
    app_module = APP_MODULE,
    app_name = APP_NAME,
<<<<<<< HEAD
    build_deps = BUILD_DEPS,
    runtime_deps = RUNTIME_DEPS,
    deps = DEPS,
    extra_apps = EXTRA_APPS,
)

xref()

plt(
    name = "base_plt",
    plt = "//:base_plt",
    apps = EXTRA_APPS,
    deps = BUILD_DEPS + DEPS + RUNTIME_DEPS,
)

dialyze(
    dialyzer_opts = RABBITMQ_DIALYZER_OPTS,
    plt = ":base_plt",
)

broker_for_integration_suites()

rabbitmq_test_helper(
    name = "test_utils",
    srcs = glob(["test/src/*.erl"]),
    hdrs = glob(["test/src/*.hrl"]),
=======
    beam_files = [":beam_files"],
    extra_apps = ["ssl"],
    license_files = [":license_files"],
    priv = [":priv"],
    deps = [
        "//deps/rabbit:erlang_app",
        "//deps/rabbit_common:erlang_app",
        "//deps/rabbitmq_mqtt:erlang_app",
        "@cowboy//:erlang_app",
    ],
)

xref(
    name = "xref",
    target = ":erlang_app",
>>>>>>> 2aaf2176d4 (Use gazelle generated bazel files)
)

plt(
    name = "deps_plt",
    for_target = ":erlang_app",
    ignore_warnings = True,
    libs = ["//deps/rabbitmq_cli:elixir"],  # keep
    plt = "//:base_plt",
)

dialyze(
    name = "dialyze",
    dialyzer_opts = RABBITMQ_DIALYZER_OPTS,
    plt = ":deps_plt",
    target = ":erlang_app",
)

eunit(
    name = "eunit",
    compiled_suites = [
        ":test_src_rabbit_ws_test_util_beam",
        ":test_src_rfc6455_client_beam",
    ],
    target = ":test_erlang_app",
)

broker_for_integration_suites()

rabbitmq_integration_suite(
    name = "config_schema_SUITE",
)

rabbitmq_integration_suite(
    name = "proxy_protocol_SUITE",
<<<<<<< HEAD
    additional_beam = [":test_utils"],
    additional_hdrs = glob(["test/src/*.hrl"]),
    erlc_opts = [
        "-I",
        "deps/rabbitmq_web_mqtt/test",
=======
    additional_beam = [
        "test/src/rabbit_ws_test_util.beam",
        "test/src/rfc6455_client.beam",
>>>>>>> 2aaf2176d4 (Use gazelle generated bazel files)
    ],
)

rabbitmq_integration_suite(
    name = "system_SUITE",
<<<<<<< HEAD
    additional_beam = [":test_utils"],
    additional_hdrs = glob(["test/src/*.hrl"]),
=======
    additional_beam = [
        "test/src/rabbit_ws_test_util.beam",
        "test/src/rfc6455_client.beam",
    ],
>>>>>>> 2aaf2176d4 (Use gazelle generated bazel files)
)

assert_suites()

alias(
    name = "rabbitmq_web_mqtt",
    actual = ":erlang_app",
    visibility = ["//visibility:public"],
)
