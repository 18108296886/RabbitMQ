load("@rules_pkg//:pkg.bzl", "pkg_tar")
load("@rules_erlang//:dialyze.bzl", "plt")
load("@rules_erlang//:shell.bzl", "shell")
load("elixir_home.bzl", "elixir_home")
load(":rabbitmq_home.bzl", "rabbitmq_home")
load(":rabbitmq_run.bzl", "rabbitmq_run", "rabbitmq_run_command")
load(":rabbitmqctl.bzl", "rabbitmqctl")
load(":rabbitmq.bzl", "ALL_PLUGINS", "APP_VERSION")
load(":dist.bzl", "collect_licenses", "versioned_rabbitmq_home")

exports_files([
    "scripts/bazel/rabbitmq-run.sh",
    "scripts/bazel/rabbitmq-run.bat",
])

config_setting(
    name = "debug_build",
    values = {
        "compilation_mode": "dbg",
    },
)

# This allows us to
# `bazel build //my/target \
#    --//:elixir_home=/path/to/elixir/installation`
elixir_home(
    name = "elixir_home",
    build_setting_default = "~/.kiex/elixirs/elixir-1.10.4",
    visibility = ["//visibility:public"],
)

platform(
    name = "erlang_git_platform",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
        "@bazel_tools//tools/cpp:clang",
    ],
    exec_properties = {
        "OSFamily": "Linux",
        # linux-erlang-git-master
        "container-image": "docker://pivotalrabbitmq/rabbitmq-server-buildenv@sha256:5d4fa38f723186668a497a8ee57e22010187e9347add5d4a7cc199dc13f1493f",
    },
)

plt(
    name = "base_plt",
    visibility = ["//visibility:public"],
)

rabbitmq_home(
    name = "broker-home",
    plugins = [
        "//deps/rabbit:erlang_app",
        "//deps/rabbitmq_amqp1_0:erlang_app",
        "//deps/rabbitmq_auth_backend_cache:erlang_app",
        "//deps/rabbitmq_auth_backend_http:erlang_app",
        "//deps/rabbitmq_auth_backend_ldap:erlang_app",
        "//deps/rabbitmq_auth_backend_oauth2:erlang_app",
        "//deps/rabbitmq_auth_mechanism_ssl:erlang_app",
        "//deps/rabbitmq_consistent_hash_exchange:erlang_app",
        "//deps/rabbitmq_event_exchange:erlang_app",
        "//deps/rabbitmq_federation:erlang_app",
        "//deps/rabbitmq_federation_management:erlang_app",
        "//deps/rabbitmq_jms_topic_exchange:erlang_app",
        "//deps/rabbitmq_management:erlang_app",
        "//deps/rabbitmq_mqtt:erlang_app",
        "//deps/rabbitmq_peer_discovery_aws:erlang_app",
        "//deps/rabbitmq_peer_discovery_consul:erlang_app",
        "//deps/rabbitmq_peer_discovery_etcd:erlang_app",
        "//deps/rabbitmq_peer_discovery_k8s:erlang_app",
        "//deps/rabbitmq_prometheus:erlang_app",
        "//deps/rabbitmq_random_exchange:erlang_app",
        "//deps/rabbitmq_recent_history_exchange:erlang_app",
        "//deps/rabbitmq_sharding:erlang_app",
        "//deps/rabbitmq_shovel:erlang_app",
        "//deps/rabbitmq_shovel_management:erlang_app",
        "//deps/rabbitmq_stomp:erlang_app",
        "//deps/rabbitmq_stream:erlang_app",
        "//deps/rabbitmq_stream_management:erlang_app",
        "//deps/rabbitmq_top:erlang_app",
        "//deps/rabbitmq_tracing:erlang_app",
        "//deps/rabbitmq_trust_store:erlang_app",
        "//deps/rabbitmq_web_dispatch:erlang_app",
        "//deps/rabbitmq_web_mqtt:erlang_app",
        "//deps/rabbitmq_web_stomp:erlang_app",
    ],
)

rabbitmq_run(
    name = "rabbitmq-run",
    home = ":broker-home",
    visibility = ["//visibility:public"],
)

# Allow us to `bazel run broker`
# for the equivalent of `make run-broker`
# (though it as of yet includes no plugins)
rabbitmq_run_command(
    name = "broker",
    rabbitmq_run = ":rabbitmq-run",
    subcommand = "run-broker",
)

# `bazel run rabbitmqctl`
rabbitmqctl(
    name = "rabbitmqctl",
    home = ":broker-home",
    visibility = ["//visibility:public"],
)

rabbitmqctl(
    name = "rabbitmq-diagnostics",
    home = ":broker-home",
)

rabbitmqctl(
    name = "rabbitmq-plugins",
    home = ":broker-home",
)

shell(
    name = "repl",
    deps = ALL_PLUGINS,
)

collect_licenses(
    name = "licenses",
    srcs = glob(
        ["LICENSE*"],
        exclude = [
            "LICENSE.md",
            "LICENSE.txt",
        ],
    ),
    deps = ALL_PLUGINS,
)

versioned_rabbitmq_home(
    name = "dist-home",
    plugins = ALL_PLUGINS,
)

pkg_tar(
    name = "license-files",
    srcs = [
        ":licenses",
        "//deps/rabbit:INSTALL",
    ],
    visibility = ["//visibility:public"],
)

pkg_tar(
    name = "scripts",
    srcs = [
        "scripts/bash_autocomplete.sh",
        "scripts/rabbitmq-script-wrapper",
        "scripts/rabbitmqctl-autocomplete.sh",
        "scripts/zsh_autocomplete.sh",
    ],
    package_dir = "scripts",
    visibility = ["//visibility:public"],
)

pkg_tar(
    name = "release-notes",
    srcs = glob([
        "release-notes/*.md",
        "release-notes/*.txt",
    ]),
    package_dir = "release-notes",
    visibility = ["//visibility:public"],
)

pkg_tar(
    name = "package-generic-unix",
    srcs = [
        ":dist-home",
    ],
    extension = "tar.xz",
    package_dir = "rabbitmq_server-{}".format(APP_VERSION),
    strip_prefix = "dist-home",
    visibility = ["//visibility:public"],
    deps = [
        ":license-files",
        ":release-notes",
        ":scripts",
        "//deps/rabbit:manpages-dir",
    ],
)
